name: Release Build

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.0.0)'
        required: true
        default: '0.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set Version
        run: |
          if ("${{ github.event_name }}" -eq "release") {
            $VERSION = "${{ github.ref }}".Replace('refs/tags/v', '')
          } else {
            $VERSION = "${{ github.event.inputs.version }}"
          }
          echo "APP_VERSION=$VERSION" >> $env:GITHUB_ENV
          echo "Version set to: $VERSION"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pillow
          
      - name: Build Windows executable
        run: |
          $env:PYTHONPATH = "$PWD"
          pyinstaller --name "LabSync" `
            --windowed `
            --onefile `
            --add-data "src/gui/resources;gui/resources" `
            --paths "." `
            --hidden-import src.utils `
            --hidden-import src.database `
            --hidden-import src.network `
            --hidden-import src.gui `
            --hidden-import src.protocols `
            --icon "src/gui/resources/icon.ico" `
            src/main.py

      - name: Create Windows Installer
        run: |
          choco install innosetup -y
          echo "Running Inno Setup Compiler with version: $env:APP_VERSION"
          iscc "/DAppVersion=$env:APP_VERSION" "installer/windows/installer.iss"
          echo "Contents of dist after Inno Setup:"
          Get-ChildItem -Path dist -Recurse | Format-Table FullName

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/LabSync-Setup-${{ env.APP_VERSION }}.exe

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/LabSync-Setup-${{ env.APP_VERSION }}.exe
          asset_name: LabSync-Setup-${{ env.APP_VERSION }}.exe
          asset_content_type: application/octet-stream

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set Version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.ref }}"
            VERSION="${VERSION#refs/tags/v}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version set to: $VERSION"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          
      - name: Create icns file
        run: |
          mkdir icon.iconset
          sips -s format png src/gui/resources/icon.png --out icon.iconset/icon_512x512.png
          sips -s format png src/gui/resources/icon.png -z 256 256 --out icon.iconset/icon_256x256.png
          sips -s format png src/gui/resources/icon.png -z 128 128 --out icon.iconset/icon_128x128.png
          iconutil -c icns icon.iconset -o LabSync.icns
          
      - name: Build macOS app
        run: |
          pyinstaller --name "LabSync" --windowed --onefile --add-data "src/gui/resources:gui/resources" --icon "LabSync.icns" src/main.py
          
      - name: Create DMG
        run: |
          if [ ! -d "dist/LabSync.app" ]; then
            echo "Error: dist/LabSync.app not found!"
            exit 1
          fi
          hdiutil create -srcfolder "dist/LabSync.app" -volname "LabSync" -fs HFS+ -format UDZO -size 100m "dist/LabSync-${{ env.APP_VERSION }}.dmg"

      - name: Upload DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: dist/LabSync-${{ env.APP_VERSION }}.dmg

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/LabSync-${{ env.APP_VERSION }}.dmg
          asset_name: LabSync-${{ env.APP_VERSION }}.dmg
          asset_content_type: application/x-apple-diskimage

  create-update-info:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Create update config
        run: |
          cat > update_config.json << EOL
          {
            "latest_version": "${GITHUB_REF#refs/tags/v}",
            "download_url": "${{ github.event.release.html_url }}",
            "windows_url": "${{ github.event.release.assets[0].browser_download_url }}",
            "macos_url": "${{ github.event.release.assets[1].browser_download_url }}",
            "changelog_url": "${{ github.event.release.html_url }}"
          }
          EOL

      - name: Upload update config
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./update_config.json
          asset_name: update_config.json
          asset_content_type: application/json
